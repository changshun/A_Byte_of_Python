---
output: html_document
---
## 字符编码
最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是```65535```4个字节可以表示的最大整数是```4294967295```.  
#### ASCII码
最早只有127个字母被编码到计算机里，也就是大小写英文字母、数字和一些符号，![ASCII](http://www.plcdev.com/files/plcdev/images/Simple%20ASCII%20Table_0.gif)  
中国：```GB2312 ```...各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。因此，Unicode应运而生。
#### Unicode  
ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。
####UTF-8
本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：  

| 字符 | ASCII    | Unicode           | UTF－8   |  
|:----:|----------|-------------------|----------|
| A    | 01000001 | 00000000 01000001 | 01000001 |   
| 中   | x        | 01001110 00101101 |  11100100 10111000 10101101   |    

## Python 字符串 
Python的诞生比Unicode标准发布的时间还要早，所以最早的Python只支持ASCII编码。Python提供了ord()和chr()函数，可以把字母和对应的数字相互转换：
```python
>>> ord('A')
65
>>> chr(65)
'A'
```
Python在后来添加了对Unicode的支持，以Unicode表示的字符串用```u'...'```表示，比如：
把```u'xxx'```转换为UTF-8编码的```'xxx'```用```encode('utf-8')```方法：
```python
>>> print u'中文'
中文
>>> u'中'
u'\u4e2d'
```
把u'xxx'转换为UTF-8编码的'xxx'用encode('utf-8')方法：
```python
>>> u'ABC'.encode('utf-8')
'ABC'
>>> u'中文'.encode('utf-8')
'\xe4\xb8\xad\xe6\x96\x87'
```
英文字符转换后表示的UTF-8的值和Unicode值相等（但占用的存储空间不同），而中文字符转换后1个Unicode字符将变为3个UTF-8字符

反过来，把UTF-8编码表示的字符串'xxx'转换为Unicode字符串u'xxx'用decode('utf-8')方法：
```python
>>> 'abc'.decode('utf-8')
u'abc'
>>> '\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')
u'\u4e2d\u6587'
>>> print '\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')
中文
```
由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：
```python
#!/usr/bin/env python
# -*- coding: utf-8 -*-
```
## 格式化
在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：
```python
>>> 'Hello, %s' % 'world'
'Hello, world'
>>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)
'Hi, Michael, you have $1000000.'
```
 常见的占位符：
|占位符|类型|
|:----:|--------|
|%d  |整数  |
|%f  |浮点数  |
|%s  |字符串|
|%x  |十六进制整数  |

格式化整数和浮点数还可以指定是否补0和整数与小数的位数：
```python 
>>> '%3d-%03d' %(3,10)
'  3-010'
>>> '%.5f' %3.14
'3.14000'
>>> '%s' %3.14
'3.14'
```
有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%

## 小结
由于历史遗留问题，Python 2.x版本虽然支持Unicode，但在语法上需要`'xxx'`和`u'xxx'`两种字符串表示方式。  
在Python 3.x版本中，把`'xxx'`和`u'xxx'`统一成Unicode编码，即写不写前缀u都是一样的，而以字节形式表示的字符串则必须加上`b`前缀：`b'xxx'`。
